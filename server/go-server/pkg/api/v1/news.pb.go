// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type News struct {
	// message body
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text                 string               `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ThumbnailUrl         string               `protobuf:"bytes,4,opt,name=thumbnailUrl,proto3" json:"thumbnailUrl,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Uid                  string               `protobuf:"bytes,6,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *News) Reset()         { *m = News{} }
func (m *News) String() string { return proto.CompactTextString(m) }
func (*News) ProtoMessage()    {}
func (*News) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0382e93bed6d84, []int{0}
}

func (m *News) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_News.Unmarshal(m, b)
}
func (m *News) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_News.Marshal(b, m, deterministic)
}
func (m *News) XXX_Merge(src proto.Message) {
	xxx_messageInfo_News.Merge(m, src)
}
func (m *News) XXX_Size() int {
	return xxx_messageInfo_News.Size(m)
}
func (m *News) XXX_DiscardUnknown() {
	xxx_messageInfo_News.DiscardUnknown(m)
}

var xxx_messageInfo_News proto.InternalMessageInfo

func (m *News) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *News) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *News) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *News) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type NewNews struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ThumbnailUrl         string   `protobuf:"bytes,3,opt,name=thumbnailUrl,proto3" json:"thumbnailUrl,omitempty"`
	Uid                  string   `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewNews) Reset()         { *m = NewNews{} }
func (m *NewNews) String() string { return proto.CompactTextString(m) }
func (*NewNews) ProtoMessage()    {}
func (*NewNews) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0382e93bed6d84, []int{1}
}

func (m *NewNews) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewNews.Unmarshal(m, b)
}
func (m *NewNews) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewNews.Marshal(b, m, deterministic)
}
func (m *NewNews) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewNews.Merge(m, src)
}
func (m *NewNews) XXX_Size() int {
	return xxx_messageInfo_NewNews.Size(m)
}
func (m *NewNews) XXX_DiscardUnknown() {
	xxx_messageInfo_NewNews.DiscardUnknown(m)
}

var xxx_messageInfo_NewNews proto.InternalMessageInfo

func (m *NewNews) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NewNews) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *NewNews) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *NewNews) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type RequestNewsID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestNewsID) Reset()         { *m = RequestNewsID{} }
func (m *RequestNewsID) String() string { return proto.CompactTextString(m) }
func (*RequestNewsID) ProtoMessage()    {}
func (*RequestNewsID) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0382e93bed6d84, []int{2}
}

func (m *RequestNewsID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestNewsID.Unmarshal(m, b)
}
func (m *RequestNewsID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestNewsID.Marshal(b, m, deterministic)
}
func (m *RequestNewsID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestNewsID.Merge(m, src)
}
func (m *RequestNewsID) XXX_Size() int {
	return xxx_messageInfo_RequestNewsID.Size(m)
}
func (m *RequestNewsID) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestNewsID.DiscardUnknown(m)
}

var xxx_messageInfo_RequestNewsID proto.InternalMessageInfo

func (m *RequestNewsID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*News)(nil), "v1.News")
	proto.RegisterType((*NewNews)(nil), "v1.NewNews")
	proto.RegisterType((*RequestNewsID)(nil), "v1.RequestNewsID")
}

func init() { proto.RegisterFile("news.proto", fileDescriptor_2c0382e93bed6d84) }

var fileDescriptor_2c0382e93bed6d84 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4e, 0x83, 0x40,
	0x18, 0x84, 0xbb, 0x94, 0xb6, 0xf2, 0xa3, 0x46, 0x37, 0xc6, 0x6c, 0xf0, 0xd0, 0x86, 0x53, 0xe3,
	0x61, 0xdb, 0xe2, 0xc5, 0xab, 0x89, 0xc6, 0x78, 0xe9, 0x81, 0xea, 0x03, 0x80, 0xfc, 0xd6, 0x4d,
	0xa0, 0x20, 0x2c, 0xa0, 0x4f, 0xe3, 0x2b, 0xf8, 0x88, 0x86, 0x05, 0x5a, 0x5b, 0xab, 0xb7, 0x65,
	0x66, 0x76, 0xe6, 0x03, 0x00, 0x56, 0x58, 0x66, 0x3c, 0x49, 0x63, 0x19, 0x53, 0xad, 0x98, 0x59,
	0x17, 0xcb, 0x38, 0x5e, 0x86, 0x38, 0x51, 0x8a, 0x9f, 0xbf, 0x4c, 0x30, 0x4a, 0xe4, 0x47, 0x1d,
	0xb0, 0x86, 0xbb, 0xa6, 0x14, 0x11, 0x66, 0xd2, 0x8b, 0x92, 0x3a, 0x60, 0x7f, 0x11, 0xd0, 0xe7,
	0x58, 0x66, 0xf4, 0x18, 0x34, 0x11, 0x30, 0x32, 0x22, 0x63, 0xc3, 0xd5, 0x44, 0x40, 0xcf, 0xa0,
	0x27, 0x85, 0x0c, 0x91, 0x69, 0x4a, 0xaa, 0x1f, 0x28, 0x05, 0x5d, 0xe2, 0xbb, 0x64, 0x5d, 0x25,
	0xaa, 0x33, 0xb5, 0xe1, 0x50, 0xbe, 0xe6, 0x91, 0xbf, 0xf2, 0x44, 0xf8, 0x94, 0x86, 0x4c, 0x57,
	0xde, 0x96, 0x46, 0xaf, 0xc1, 0x58, 0x2f, 0xb3, 0xde, 0x88, 0x8c, 0x4d, 0xc7, 0xe2, 0x35, 0x1b,
	0x6f, 0xd9, 0xf8, 0x63, 0x9b, 0x70, 0x37, 0x61, 0x7a, 0x02, 0xdd, 0x5c, 0x04, 0xac, 0xaf, 0x4a,
	0xab, 0xa3, 0x2d, 0x60, 0x30, 0xc7, 0x52, 0x41, 0xaf, 0x21, 0xc9, 0x3e, 0x48, 0xed, 0x1f, 0xc8,
	0xee, 0x1e, 0xc8, 0x66, 0x4a, 0xdf, 0x4c, 0x0d, 0xe1, 0xc8, 0xc5, 0xb7, 0x1c, 0x33, 0x59, 0xcd,
	0x3d, 0xdc, 0xee, 0x7e, 0x25, 0xe7, 0x93, 0x80, 0x59, 0x59, 0x0b, 0x4c, 0x0b, 0xf1, 0x8c, 0x74,
	0x0a, 0x83, 0x9b, 0x20, 0x50, 0x6c, 0x26, 0x2f, 0x66, 0xbc, 0x01, 0xb5, 0xce, 0x7f, 0xbd, 0xec,
	0x5d, 0xf5, 0x97, 0xec, 0x0e, 0xbd, 0x04, 0xe3, 0x1e, 0xdb, 0xfa, 0xd3, 0xea, 0xce, 0xd6, 0xa2,
	0x75, 0xd0, 0xd4, 0x64, 0x76, 0x87, 0x3a, 0x00, 0x0b, 0x99, 0xa2, 0x17, 0xa9, 0x81, 0x3f, 0x3a,
	0x7f, 0xde, 0x98, 0x12, 0xbf, 0xaf, 0xdc, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xb5,
	0xdd, 0x9f, 0x37, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NewsServiceClient interface {
	AddNews(ctx context.Context, in *NewNews, opts ...grpc.CallOption) (*empty.Empty, error)
	GetNewsID(ctx context.Context, in *RequestNewsID, opts ...grpc.CallOption) (*News, error)
	StreamNews(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NewsService_StreamNewsClient, error)
}

type newsServiceClient struct {
	cc *grpc.ClientConn
}

func NewNewsServiceClient(cc *grpc.ClientConn) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) AddNews(ctx context.Context, in *NewNews, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.NewsService/AddNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsID(ctx context.Context, in *RequestNewsID, opts ...grpc.CallOption) (*News, error) {
	out := new(News)
	err := c.cc.Invoke(ctx, "/v1.NewsService/GetNewsID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) StreamNews(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (NewsService_StreamNewsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NewsService_serviceDesc.Streams[0], "/v1.NewsService/StreamNews", opts...)
	if err != nil {
		return nil, err
	}
	x := &newsServiceStreamNewsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NewsService_StreamNewsClient interface {
	Recv() (*News, error)
	grpc.ClientStream
}

type newsServiceStreamNewsClient struct {
	grpc.ClientStream
}

func (x *newsServiceStreamNewsClient) Recv() (*News, error) {
	m := new(News)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewsServiceServer is the server API for NewsService service.
type NewsServiceServer interface {
	AddNews(context.Context, *NewNews) (*empty.Empty, error)
	GetNewsID(context.Context, *RequestNewsID) (*News, error)
	StreamNews(*empty.Empty, NewsService_StreamNewsServer) error
}

// UnimplementedNewsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNewsServiceServer struct {
}

func (*UnimplementedNewsServiceServer) AddNews(ctx context.Context, req *NewNews) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNews not implemented")
}
func (*UnimplementedNewsServiceServer) GetNewsID(ctx context.Context, req *RequestNewsID) (*News, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsID not implemented")
}
func (*UnimplementedNewsServiceServer) StreamNews(req *empty.Empty, srv NewsService_StreamNewsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNews not implemented")
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_AddNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).AddNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NewsService/AddNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).AddNews(ctx, req.(*NewNews))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNewsID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.NewsService/GetNewsID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsID(ctx, req.(*RequestNewsID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_StreamNews_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewsServiceServer).StreamNews(m, &newsServiceStreamNewsServer{stream})
}

type NewsService_StreamNewsServer interface {
	Send(*News) error
	grpc.ServerStream
}

type newsServiceStreamNewsServer struct {
	grpc.ServerStream
}

func (x *newsServiceStreamNewsServer) Send(m *News) error {
	return x.ServerStream.SendMsg(m)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNews",
			Handler:    _NewsService_AddNews_Handler,
		},
		{
			MethodName: "GetNewsID",
			Handler:    _NewsService_GetNewsID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNews",
			Handler:       _NewsService_StreamNews_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "news.proto",
}
