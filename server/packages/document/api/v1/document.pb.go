// Code generated by protoc-gen-go. DO NOT EDIT.
// source: document.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Conflict status
type ConflictStatus int32

const (
	ConflictStatus_NONE     ConflictStatus = 0
	ConflictStatus_NEW      ConflictStatus = 1
	ConflictStatus_OUTDATED ConflictStatus = 2
	ConflictStatus_SYNC     ConflictStatus = 3
)

var ConflictStatus_name = map[int32]string{
	0: "NONE",
	1: "NEW",
	2: "OUTDATED",
	3: "SYNC",
}

var ConflictStatus_value = map[string]int32{
	"NONE":     0,
	"NEW":      1,
	"OUTDATED": 2,
	"SYNC":     3,
}

func (x ConflictStatus) String() string {
	return proto.EnumName(ConflictStatus_name, int32(x))
}

func (ConflictStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{0}
}

// Sync type of a document
type SyncType int32

const (
	SyncType_NOTHING SyncType = 0
	SyncType_CREATE  SyncType = 1
	SyncType_MERGE   SyncType = 2
)

var SyncType_name = map[int32]string{
	0: "NOTHING",
	1: "CREATE",
	2: "MERGE",
}

var SyncType_value = map[string]int32{
	"NOTHING": 0,
	"CREATE":  1,
	"MERGE":   2,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}

func (SyncType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{1}
}

// document object
type Document struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocalId              string               `protobuf:"bytes,2,opt,name=localId,proto3" json:"localId,omitempty"`
	Data                 string               `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Uid                  string               `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Conflict             ConflictStatus       `protobuf:"varint,5,opt,name=Conflict,proto3,enum=v1.ConflictStatus" json:"Conflict,omitempty"`
	Type                 SyncType             `protobuf:"varint,6,opt,name=type,proto3,enum=v1.SyncType" json:"type,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	LastUpdate           *timestamp.Timestamp `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Document) Reset()         { *m = Document{} }
func (m *Document) String() string { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()    {}
func (*Document) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{0}
}

func (m *Document) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Document.Unmarshal(m, b)
}
func (m *Document) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Document.Marshal(b, m, deterministic)
}
func (m *Document) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Document.Merge(m, src)
}
func (m *Document) XXX_Size() int {
	return xxx_messageInfo_Document.Size(m)
}
func (m *Document) XXX_DiscardUnknown() {
	xxx_messageInfo_Document.DiscardUnknown(m)
}

var xxx_messageInfo_Document proto.InternalMessageInfo

func (m *Document) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Document) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *Document) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Document) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Document) GetConflict() ConflictStatus {
	if m != nil {
		return m.Conflict
	}
	return ConflictStatus_NONE
}

func (m *Document) GetType() SyncType {
	if m != nil {
		return m.Type
	}
	return SyncType_NOTHING
}

func (m *Document) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Document) GetLastUpdate() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdate
	}
	return nil
}

// Check sync document
type CheckSync struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocalId              string               `protobuf:"bytes,2,opt,name=localId,proto3" json:"localId,omitempty"`
	LastUpdate           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CheckSync) Reset()         { *m = CheckSync{} }
func (m *CheckSync) String() string { return proto.CompactTextString(m) }
func (*CheckSync) ProtoMessage()    {}
func (*CheckSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{1}
}

func (m *CheckSync) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckSync.Unmarshal(m, b)
}
func (m *CheckSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckSync.Marshal(b, m, deterministic)
}
func (m *CheckSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckSync.Merge(m, src)
}
func (m *CheckSync) XXX_Size() int {
	return xxx_messageInfo_CheckSync.Size(m)
}
func (m *CheckSync) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckSync.DiscardUnknown(m)
}

var xxx_messageInfo_CheckSync proto.InternalMessageInfo

func (m *CheckSync) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CheckSync) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *CheckSync) GetLastUpdate() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdate
	}
	return nil
}

// Request check sync document
type RequestCheckSync struct {
	Uid                  string       `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Checks               []*CheckSync `protobuf:"bytes,2,rep,name=checks,proto3" json:"checks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RequestCheckSync) Reset()         { *m = RequestCheckSync{} }
func (m *RequestCheckSync) String() string { return proto.CompactTextString(m) }
func (*RequestCheckSync) ProtoMessage()    {}
func (*RequestCheckSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{2}
}

func (m *RequestCheckSync) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestCheckSync.Unmarshal(m, b)
}
func (m *RequestCheckSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestCheckSync.Marshal(b, m, deterministic)
}
func (m *RequestCheckSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCheckSync.Merge(m, src)
}
func (m *RequestCheckSync) XXX_Size() int {
	return xxx_messageInfo_RequestCheckSync.Size(m)
}
func (m *RequestCheckSync) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCheckSync.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCheckSync proto.InternalMessageInfo

func (m *RequestCheckSync) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *RequestCheckSync) GetChecks() []*CheckSync {
	if m != nil {
		return m.Checks
	}
	return nil
}

// Response check sync document
type ResponseCheckSync struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocalId              string         `protobuf:"bytes,2,opt,name=localId,proto3" json:"localId,omitempty"`
	Conflict             ConflictStatus `protobuf:"varint,3,opt,name=conflict,proto3,enum=v1.ConflictStatus" json:"conflict,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResponseCheckSync) Reset()         { *m = ResponseCheckSync{} }
func (m *ResponseCheckSync) String() string { return proto.CompactTextString(m) }
func (*ResponseCheckSync) ProtoMessage()    {}
func (*ResponseCheckSync) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d2790a4091b3173, []int{3}
}

func (m *ResponseCheckSync) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseCheckSync.Unmarshal(m, b)
}
func (m *ResponseCheckSync) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseCheckSync.Marshal(b, m, deterministic)
}
func (m *ResponseCheckSync) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseCheckSync.Merge(m, src)
}
func (m *ResponseCheckSync) XXX_Size() int {
	return xxx_messageInfo_ResponseCheckSync.Size(m)
}
func (m *ResponseCheckSync) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseCheckSync.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseCheckSync proto.InternalMessageInfo

func (m *ResponseCheckSync) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResponseCheckSync) GetLocalId() string {
	if m != nil {
		return m.LocalId
	}
	return ""
}

func (m *ResponseCheckSync) GetConflict() ConflictStatus {
	if m != nil {
		return m.Conflict
	}
	return ConflictStatus_NONE
}

func init() {
	proto.RegisterEnum("v1.ConflictStatus", ConflictStatus_name, ConflictStatus_value)
	proto.RegisterEnum("v1.SyncType", SyncType_name, SyncType_value)
	proto.RegisterType((*Document)(nil), "v1.Document")
	proto.RegisterType((*CheckSync)(nil), "v1.CheckSync")
	proto.RegisterType((*RequestCheckSync)(nil), "v1.RequestCheckSync")
	proto.RegisterType((*ResponseCheckSync)(nil), "v1.ResponseCheckSync")
}

func init() { proto.RegisterFile("document.proto", fileDescriptor_9d2790a4091b3173) }

var fileDescriptor_9d2790a4091b3173 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x51, 0x6b, 0xdb, 0x3c,
	0x14, 0x8d, 0xec, 0x34, 0x71, 0x6e, 0xda, 0x7c, 0xfe, 0x2e, 0x1d, 0x88, 0xbc, 0xcc, 0x04, 0x06,
	0xa6, 0x0f, 0x6a, 0x9b, 0xbd, 0x8c, 0xee, 0x29, 0x24, 0x26, 0x0b, 0x63, 0x0e, 0x28, 0x2e, 0x63,
	0x8f, 0xae, 0xac, 0x74, 0x66, 0x4e, 0xec, 0xc6, 0x72, 0x20, 0x7f, 0x64, 0x3f, 0x60, 0xbf, 0x74,
	0x58, 0x89, 0x9a, 0xb5, 0x50, 0x46, 0xf7, 0x76, 0x75, 0xce, 0xb9, 0xba, 0x3a, 0xe7, 0x0a, 0x7a,
	0x49, 0x2e, 0xaa, 0x95, 0x5c, 0x2b, 0x56, 0x6c, 0x72, 0x95, 0xa3, 0xb5, 0xbd, 0xee, 0xbf, 0xbd,
	0xcf, 0xf3, 0xfb, 0x4c, 0x5e, 0x6a, 0xe4, 0xae, 0x5a, 0x5e, 0xaa, 0x74, 0x25, 0x4b, 0x15, 0xaf,
	0x8a, 0xbd, 0x68, 0xf0, 0xcb, 0x02, 0x67, 0x72, 0xe8, 0xc3, 0x1e, 0x58, 0x69, 0x42, 0x89, 0x47,
	0xfc, 0x0e, 0xb7, 0xd2, 0x04, 0x29, 0xb4, 0xb3, 0x5c, 0xc4, 0xd9, 0x2c, 0xa1, 0x96, 0x06, 0xcd,
	0x11, 0x11, 0x9a, 0x49, 0xac, 0x62, 0x6a, 0x6b, 0x58, 0xd7, 0xe8, 0x82, 0x5d, 0xa5, 0x09, 0x6d,
	0x6a, 0xa8, 0x2e, 0x91, 0x81, 0x33, 0xce, 0xd7, 0xcb, 0x2c, 0x15, 0x8a, 0x9e, 0x78, 0xc4, 0xef,
	0x0d, 0x91, 0x6d, 0xaf, 0x99, 0xc1, 0x16, 0x2a, 0x56, 0x55, 0xc9, 0x1f, 0x35, 0xe8, 0x41, 0x53,
	0xed, 0x0a, 0x49, 0x5b, 0x5a, 0x7b, 0x5a, 0x6b, 0x17, 0xbb, 0xb5, 0x88, 0x76, 0x85, 0xe4, 0x9a,
	0xc1, 0x0f, 0xd0, 0x11, 0x1b, 0x19, 0x2b, 0x99, 0x8c, 0x14, 0x6d, 0x7b, 0xc4, 0xef, 0x0e, 0xfb,
	0x6c, 0xef, 0x91, 0x19, 0x8f, 0x2c, 0x32, 0x1e, 0xf9, 0x51, 0x8c, 0x37, 0x00, 0x59, 0x5c, 0xaa,
	0xdb, 0x22, 0x89, 0x95, 0xa4, 0xce, 0x5f, 0x5b, 0xff, 0x50, 0x0f, 0x1e, 0xa0, 0x33, 0xfe, 0x2e,
	0xc5, 0x8f, 0xfa, 0x31, 0xaf, 0x08, 0xe9, 0xe9, 0x48, 0xfb, 0x55, 0x23, 0x3f, 0x83, 0xcb, 0xe5,
	0x43, 0x25, 0x4b, 0x75, 0x9c, 0x7c, 0x08, 0x98, 0x1c, 0x03, 0x7e, 0x07, 0x2d, 0x51, 0xd3, 0x25,
	0xb5, 0x3c, 0xdb, 0xef, 0x0e, 0xcf, 0x74, 0xbc, 0xa6, 0x81, 0x1f, 0xc8, 0xc1, 0x0a, 0xfe, 0xe7,
	0xb2, 0x2c, 0xf2, 0x75, 0x29, 0xff, 0xc5, 0x07, 0x03, 0x47, 0x98, 0x35, 0xda, 0x2f, 0xaf, 0xd1,
	0x68, 0x2e, 0x3e, 0x42, 0xef, 0x29, 0x87, 0x0e, 0x34, 0xc3, 0x79, 0x18, 0xb8, 0x0d, 0x6c, 0x83,
	0x1d, 0x06, 0x5f, 0x5d, 0x82, 0xa7, 0xe0, 0xcc, 0x6f, 0xa3, 0xc9, 0x28, 0x0a, 0x26, 0xae, 0x55,
	0x0b, 0x16, 0xdf, 0xc2, 0xb1, 0x6b, 0x5f, 0x30, 0x70, 0xcc, 0xce, 0xb1, 0x0b, 0xed, 0x70, 0x1e,
	0x7d, 0x9a, 0x85, 0x53, 0xb7, 0x81, 0x00, 0xad, 0x31, 0x0f, 0x46, 0x51, 0xe0, 0x12, 0xec, 0xc0,
	0xc9, 0x97, 0x80, 0x4f, 0x03, 0xd7, 0x1a, 0xfe, 0x24, 0xf0, 0x9f, 0xf9, 0xc0, 0x0b, 0xb9, 0xd9,
	0xa6, 0x42, 0xe2, 0x14, 0xce, 0xb5, 0xcf, 0xd9, 0xd2, 0x30, 0xa5, 0xb6, 0x7c, 0x5e, 0x3f, 0xfb,
	0x79, 0xac, 0xfd, 0x37, 0x7b, 0xf4, 0x59, 0x3e, 0x83, 0xc6, 0x15, 0xc1, 0x1b, 0x38, 0xab, 0xeb,
	0xc7, 0x5b, 0x50, 0xff, 0x49, 0x73, 0x7c, 0xb1, 0xd3, 0x27, 0x57, 0xe4, 0xae, 0xa5, 0x37, 0xfc,
	0xfe, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x15, 0x5a, 0x16, 0x97, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocumentServiceClient interface {
	// Check if local documents are sync with server
	CheckIfDocumentsSync(ctx context.Context, in *RequestCheckSync, opts ...grpc.CallOption) (DocumentService_CheckIfDocumentsSyncClient, error)
	// Sync local documents with server
	SyncDocuments(ctx context.Context, opts ...grpc.CallOption) (DocumentService_SyncDocumentsClient, error)
}

type documentServiceClient struct {
	cc *grpc.ClientConn
}

func NewDocumentServiceClient(cc *grpc.ClientConn) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) CheckIfDocumentsSync(ctx context.Context, in *RequestCheckSync, opts ...grpc.CallOption) (DocumentService_CheckIfDocumentsSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DocumentService_serviceDesc.Streams[0], "/v1.DocumentService/CheckIfDocumentsSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceCheckIfDocumentsSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DocumentService_CheckIfDocumentsSyncClient interface {
	Recv() (*ResponseCheckSync, error)
	grpc.ClientStream
}

type documentServiceCheckIfDocumentsSyncClient struct {
	grpc.ClientStream
}

func (x *documentServiceCheckIfDocumentsSyncClient) Recv() (*ResponseCheckSync, error) {
	m := new(ResponseCheckSync)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *documentServiceClient) SyncDocuments(ctx context.Context, opts ...grpc.CallOption) (DocumentService_SyncDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DocumentService_serviceDesc.Streams[1], "/v1.DocumentService/SyncDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &documentServiceSyncDocumentsClient{stream}
	return x, nil
}

type DocumentService_SyncDocumentsClient interface {
	Send(*Document) error
	Recv() (*ResponseCheckSync, error)
	grpc.ClientStream
}

type documentServiceSyncDocumentsClient struct {
	grpc.ClientStream
}

func (x *documentServiceSyncDocumentsClient) Send(m *Document) error {
	return x.ClientStream.SendMsg(m)
}

func (x *documentServiceSyncDocumentsClient) Recv() (*ResponseCheckSync, error) {
	m := new(ResponseCheckSync)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocumentServiceServer is the server API for DocumentService service.
type DocumentServiceServer interface {
	// Check if local documents are sync with server
	CheckIfDocumentsSync(*RequestCheckSync, DocumentService_CheckIfDocumentsSyncServer) error
	// Sync local documents with server
	SyncDocuments(DocumentService_SyncDocumentsServer) error
}

// UnimplementedDocumentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDocumentServiceServer struct {
}

func (*UnimplementedDocumentServiceServer) CheckIfDocumentsSync(req *RequestCheckSync, srv DocumentService_CheckIfDocumentsSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckIfDocumentsSync not implemented")
}
func (*UnimplementedDocumentServiceServer) SyncDocuments(srv DocumentService_SyncDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncDocuments not implemented")
}

func RegisterDocumentServiceServer(s *grpc.Server, srv DocumentServiceServer) {
	s.RegisterService(&_DocumentService_serviceDesc, srv)
}

func _DocumentService_CheckIfDocumentsSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestCheckSync)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocumentServiceServer).CheckIfDocumentsSync(m, &documentServiceCheckIfDocumentsSyncServer{stream})
}

type DocumentService_CheckIfDocumentsSyncServer interface {
	Send(*ResponseCheckSync) error
	grpc.ServerStream
}

type documentServiceCheckIfDocumentsSyncServer struct {
	grpc.ServerStream
}

func (x *documentServiceCheckIfDocumentsSyncServer) Send(m *ResponseCheckSync) error {
	return x.ServerStream.SendMsg(m)
}

func _DocumentService_SyncDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServiceServer).SyncDocuments(&documentServiceSyncDocumentsServer{stream})
}

type DocumentService_SyncDocumentsServer interface {
	Send(*ResponseCheckSync) error
	Recv() (*Document, error)
	grpc.ServerStream
}

type documentServiceSyncDocumentsServer struct {
	grpc.ServerStream
}

func (x *documentServiceSyncDocumentsServer) Send(m *ResponseCheckSync) error {
	return x.ServerStream.SendMsg(m)
}

func (x *documentServiceSyncDocumentsServer) Recv() (*Document, error) {
	m := new(Document)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DocumentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckIfDocumentsSync",
			Handler:       _DocumentService_CheckIfDocumentsSync_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncDocuments",
			Handler:       _DocumentService_SyncDocuments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "document.proto",
}
